// Generated by gencpp from file mavros_msgs/ExcavatorInclination.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_EXCAVATORINCLINATION_H
#define MAVROS_MSGS_MESSAGE_EXCAVATORINCLINATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct ExcavatorInclination_
{
  typedef ExcavatorInclination_<ContainerAllocator> Type;

  ExcavatorInclination_()
    : header()
    , boom_deg(0.0)
    , forearm_deg(0.0)
    , bucket_deg(0.0)
    , boom_vel(0.0)
    , forearm_vel(0.0)
    , bucket_vel(0.0)
    , cylinder_boom(0.0)
    , cylinder_forearm(0.0)
    , cylinder_bucket(0.0)  {
    }
  ExcavatorInclination_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , boom_deg(0.0)
    , forearm_deg(0.0)
    , bucket_deg(0.0)
    , boom_vel(0.0)
    , forearm_vel(0.0)
    , bucket_vel(0.0)
    , cylinder_boom(0.0)
    , cylinder_forearm(0.0)
    , cylinder_bucket(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _boom_deg_type;
  _boom_deg_type boom_deg;

   typedef double _forearm_deg_type;
  _forearm_deg_type forearm_deg;

   typedef double _bucket_deg_type;
  _bucket_deg_type bucket_deg;

   typedef double _boom_vel_type;
  _boom_vel_type boom_vel;

   typedef double _forearm_vel_type;
  _forearm_vel_type forearm_vel;

   typedef double _bucket_vel_type;
  _bucket_vel_type bucket_vel;

   typedef double _cylinder_boom_type;
  _cylinder_boom_type cylinder_boom;

   typedef double _cylinder_forearm_type;
  _cylinder_forearm_type cylinder_forearm;

   typedef double _cylinder_bucket_type;
  _cylinder_bucket_type cylinder_bucket;





  typedef boost::shared_ptr< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> const> ConstPtr;

}; // struct ExcavatorInclination_

typedef ::mavros_msgs::ExcavatorInclination_<std::allocator<void> > ExcavatorInclination;

typedef boost::shared_ptr< ::mavros_msgs::ExcavatorInclination > ExcavatorInclinationPtr;
typedef boost::shared_ptr< ::mavros_msgs::ExcavatorInclination const> ExcavatorInclinationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::ExcavatorInclination_<ContainerAllocator1> & lhs, const ::mavros_msgs::ExcavatorInclination_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.boom_deg == rhs.boom_deg &&
    lhs.forearm_deg == rhs.forearm_deg &&
    lhs.bucket_deg == rhs.bucket_deg &&
    lhs.boom_vel == rhs.boom_vel &&
    lhs.forearm_vel == rhs.forearm_vel &&
    lhs.bucket_vel == rhs.bucket_vel &&
    lhs.cylinder_boom == rhs.cylinder_boom &&
    lhs.cylinder_forearm == rhs.cylinder_forearm &&
    lhs.cylinder_bucket == rhs.cylinder_bucket;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::ExcavatorInclination_<ContainerAllocator1> & lhs, const ::mavros_msgs::ExcavatorInclination_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c5cdfd62e264348da655a1f34c898bc";
  }

  static const char* value(const ::mavros_msgs::ExcavatorInclination_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c5cdfd62e264348ULL;
  static const uint64_t static_value2 = 0xda655a1f34c898bcULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/ExcavatorInclination";
  }

  static const char* value(const ::mavros_msgs::ExcavatorInclination_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Stamped Excavator Inclination message\n"
"#\n"
"# For streaming timestamped data from FCU inclination.\n"
"\n"
"std_msgs/Header header\n"
"float64 boom_deg\n"
"float64 forearm_deg\n"
"float64 bucket_deg\n"
"float64 boom_vel\n"
"float64 forearm_vel\n"
"float64 bucket_vel\n"
"float64 cylinder_boom    \n"
"float64 cylinder_forearm \n"
"float64 cylinder_bucket  \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::ExcavatorInclination_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.boom_deg);
      stream.next(m.forearm_deg);
      stream.next(m.bucket_deg);
      stream.next(m.boom_vel);
      stream.next(m.forearm_vel);
      stream.next(m.bucket_vel);
      stream.next(m.cylinder_boom);
      stream.next(m.cylinder_forearm);
      stream.next(m.cylinder_bucket);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExcavatorInclination_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::ExcavatorInclination_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::ExcavatorInclination_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "boom_deg: ";
    Printer<double>::stream(s, indent + "  ", v.boom_deg);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "forearm_deg: ";
    Printer<double>::stream(s, indent + "  ", v.forearm_deg);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "bucket_deg: ";
    Printer<double>::stream(s, indent + "  ", v.bucket_deg);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "boom_vel: ";
    Printer<double>::stream(s, indent + "  ", v.boom_vel);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "forearm_vel: ";
    Printer<double>::stream(s, indent + "  ", v.forearm_vel);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "bucket_vel: ";
    Printer<double>::stream(s, indent + "  ", v.bucket_vel);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cylinder_boom: ";
    Printer<double>::stream(s, indent + "  ", v.cylinder_boom);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cylinder_forearm: ";
    Printer<double>::stream(s, indent + "  ", v.cylinder_forearm);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cylinder_bucket: ";
    Printer<double>::stream(s, indent + "  ", v.cylinder_bucket);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_EXCAVATORINCLINATION_H
